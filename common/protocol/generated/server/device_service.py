# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: device_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto
import grpclib


@dataclass
class RegisterSensorsRequest(betterproto.Message):
    sensors: List["Sensor"] = betterproto.message_field(1)


@dataclass
class RegisterSensorsResponse(betterproto.Message):
    pass


@dataclass
class RegisterExecutorsRequest(betterproto.Message):
    executors: List["Executor"] = betterproto.message_field(1)


@dataclass
class RegisterExecutorsResponse(betterproto.Message):
    pass


@dataclass
class UpdateSensorDataRequest(betterproto.Message):
    data: List["SensorData"] = betterproto.message_field(1)


@dataclass
class UpdateSensorDataResponse(betterproto.Message):
    pass


@dataclass
class GetVirtualSensorDataRequest(betterproto.Message):
    pass


@dataclass
class GetVirtualSensorDataResponse(betterproto.Message):
    data: List["SensorData"] = betterproto.message_field(1)


@dataclass
class PollExecutorTasksRequest(betterproto.Message):
    pass


@dataclass
class PollExecutorTasksResponse(betterproto.Message):
    tasks: List["ExecutorTask"] = betterproto.message_field(1)


@dataclass
class RegisterDevicesRequest(betterproto.Message):
    sensors: List["Sensor"] = betterproto.message_field(1)
    sensor_data: List["SensorData"] = betterproto.message_field(2)
    executors: List["Executor"] = betterproto.message_field(3)
    exec_data: List["ExecutorData"] = betterproto.message_field(4)


@dataclass
class RegisterDevicesResponce(betterproto.Message):
    sens_data: List["SensorData"] = betterproto.message_field(1)
    exec_data: List["ExecutorData"] = betterproto.message_field(2)


class DeviceServiceStub(betterproto.ServiceStub):
    async def register_sensors(
        self, *, sensors: List["Sensor"] = []
    ) -> RegisterSensorsResponse:
        request = RegisterSensorsRequest()
        if sensors is not None:
            request.sensors = sensors

        return await self._unary_unary(
            "/.DeviceService/RegisterSensors",
            request,
            RegisterSensorsResponse,
        )

    async def register_executors(
        self, *, executors: List["Executor"] = []
    ) -> RegisterExecutorsResponse:
        request = RegisterExecutorsRequest()
        if executors is not None:
            request.executors = executors

        return await self._unary_unary(
            "/.DeviceService/RegisterExecutors",
            request,
            RegisterExecutorsResponse,
        )

    async def update_sensor_data(
        self, *, data: List["SensorData"] = []
    ) -> UpdateSensorDataResponse:
        request = UpdateSensorDataRequest()
        if data is not None:
            request.data = data

        return await self._unary_unary(
            "/.DeviceService/UpdateSensorData",
            request,
            UpdateSensorDataResponse,
        )

    async def get_virtual_sensor_data(self) -> GetVirtualSensorDataResponse:
        request = GetVirtualSensorDataRequest()

        return await self._unary_unary(
            "/.DeviceService/GetVirtualSensorData",
            request,
            GetVirtualSensorDataResponse,
        )

    async def poll_executor_tasks(self) -> PollExecutorTasksResponse:
        request = PollExecutorTasksRequest()

        return await self._unary_unary(
            "/.DeviceService/PollExecutorTasks",
            request,
            PollExecutorTasksResponse,
        )

    async def register_devices(
        self,
        *,
        sensors: List["Sensor"] = [],
        sensor_data: List["SensorData"] = [],
        executors: List["Executor"] = [],
        exec_data: List["ExecutorData"] = [],
    ) -> RegisterDevicesResponce:
        request = RegisterDevicesRequest()
        if sensors is not None:
            request.sensors = sensors
        if sensor_data is not None:
            request.sensor_data = sensor_data
        if executors is not None:
            request.executors = executors
        if exec_data is not None:
            request.exec_data = exec_data

        return await self._unary_unary(
            "/.DeviceService/RegisterDevices",
            request,
            RegisterDevicesResponce,
        )
