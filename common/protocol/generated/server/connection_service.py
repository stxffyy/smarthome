# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: connection_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


@dataclass
class ConnectionRequest(betterproto.Message):
    usercreds: "User_Creds" = betterproto.message_field(1)


@dataclass
class ConnectionResponce(betterproto.Message):
    key: "SessionKey" = betterproto.message_field(1)


@dataclass
class DeviceData(betterproto.Message):
    key: "SessionKey" = betterproto.message_field(1)
    sensor: List["Sensor"] = betterproto.message_field(2)
    executor: List["Executor"] = betterproto.message_field(3)


@dataclass
class ResultData(betterproto.Message):
    key: "SessionKey" = betterproto.message_field(1)
    responce: str = betterproto.string_field(2)


@dataclass
class ReceiveCommandsRequest(betterproto.Message):
    key: "SessionKey" = betterproto.message_field(1)
    executors: List["Executor"] = betterproto.message_field(2)


@dataclass
class ReceiveCommandsResponse(betterproto.Message):
    key: "SessionKey" = betterproto.message_field(1)
    command: List[str] = betterproto.string_field(2)


@dataclass
class VirtSensorData(betterproto.Message):
    key: "SessionKey" = betterproto.message_field(1)


@dataclass
class VirtSensorResponce(betterproto.Message):
    key: "SessionKey" = betterproto.message_field(1)
    sensors: List["Sensor"] = betterproto.message_field(2)
    data: List["SensorData"] = betterproto.message_field(3)


@dataclass
class SensorDataRequest(betterproto.Message):
    key: "SessionKey" = betterproto.message_field(1)
    sensor: List["Sensor"] = betterproto.message_field(2)
    data: List["SensorData"] = betterproto.message_field(3)


@dataclass
class SensorDataResponce(betterproto.Message):
    key: "SessionKey" = betterproto.message_field(1)
    server_responce: str = betterproto.string_field(2)


class ConnectionServiceStub(betterproto.ServiceStub):
    async def connect(
        self, *, usercreds: Optional["User_Creds"] = None
    ) -> ConnectionResponce:
        request = ConnectionRequest()
        if usercreds is not None:
            request.usercreds = usercreds

        return await self._unary_unary(
            "/.ConnectionService/Connect",
            request,
            ConnectionResponce,
        )

    async def initialize_devices(
        self,
        *,
        key: Optional["SessionKey"] = None,
        sensor: List["Sensor"] = [],
        executor: List["Executor"] = [],
    ) -> ResultData:
        request = DeviceData()
        if key is not None:
            request.key = key
        if sensor is not None:
            request.sensor = sensor
        if executor is not None:
            request.executor = executor

        return await self._unary_unary(
            "/.ConnectionService/InitializeDevices",
            request,
            ResultData,
        )

    async def receive_commands(
        self, *, key: Optional["SessionKey"] = None, executors: List["Executor"] = []
    ) -> ReceiveCommandsResponse:
        request = ReceiveCommandsRequest()
        if key is not None:
            request.key = key
        if executors is not None:
            request.executors = executors

        return await self._unary_unary(
            "/.ConnectionService/ReceiveCommands",
            request,
            ReceiveCommandsResponse,
        )

    async def receive_virt_sensor_data(
        self, *, key: Optional["SessionKey"] = None
    ) -> VirtSensorResponce:
        request = VirtSensorData()
        if key is not None:
            request.key = key

        return await self._unary_unary(
            "/.ConnectionService/ReceiveVirtSensorData",
            request,
            VirtSensorResponce,
        )

    async def send_sensor_data(
        self,
        *,
        key: Optional["SessionKey"] = None,
        sensor: List["Sensor"] = [],
        data: List["SensorData"] = [],
    ) -> SensorDataResponce:
        request = SensorDataRequest()
        if key is not None:
            request.key = key
        if sensor is not None:
            request.sensor = sensor
        if data is not None:
            request.data = data

        return await self._unary_unary(
            "/.ConnectionService/SendSensorData",
            request,
            SensorDataResponce,
        )
