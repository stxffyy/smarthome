/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_EXECUTOR_NANOPB_H_INCLUDED
#define PB_EXECUTOR_NANOPB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _ExecutorType {
    EXECUTOR_TYPE_UNSPECIFIED = 0,
    EXECUTOR_TYPE_LED = 1,
    EXECUTOR_TYPE_LED_PWM = 2,
    EXECUTOR_TYPE_BUZZER = 3,
    EXECUTOR_TYPE_SERVO = 4,
    EXECUTOR_TYPE_SERVO_SMALL = 5,
    EXECUTOR_TYPE_DC_MOTOR = 6
} ExecutorType;

typedef enum _ExecutorPort {
    EXECUTOR_PORT_UNSPECIFIED = 0,
    EXECUTOR_PORT_OUT1 = 1,
    EXECUTOR_PORT_OUT2 = 2,
    EXECUTOR_PORT_OUT3 = 3,
    EXECUTOR_PORT_OUT4 = 4,
    EXECUTOR_PORT_OUT5 = 5,
    EXECUTOR_PORT_OUT6 = 6,
    EXECUTOR_PORT_OUT7 = 7,
    EXECUTOR_PORT_OUT8 = 8,
    EXECUTOR_PORT_M1 = 9,
    EXECUTOR_PORT_M2 = 10,
    EXECUTOR_PORT_M3 = 11,
    EXECUTOR_PORT_M4 = 12
} ExecutorPort;

typedef enum _ExecutorCommandType {
    EXECUTOR_COMMAND_TYPE_UNSPECIFIED = 0,
    EXECUTOR_COMMAND_TYPE_ON = 1,
    EXECUTOR_COMMAND_TYPE_OFF = 2,
    EXECUTOR_COMMAND_TYPE_SET_VALUE = 3
} ExecutorCommandType;

/* Struct definitions */
typedef struct _Executor {
    uint8_t id;
    ExecutorType type;
    char name[17];
    ExecutorPort port;
} Executor;

typedef struct _ExecutorCommand {
    ExecutorCommandType type;
    pb_size_t args_count;
    uint32_t args[1];
} ExecutorCommand;

typedef struct _ExecutorTask {
    uint8_t id;
    bool has_command;
    ExecutorCommand command;
} ExecutorTask;

typedef struct _ExecutorData {
    uint32_t id;
    uint32_t ExecutorValue;
} ExecutorData;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ExecutorType_MIN EXECUTOR_TYPE_UNSPECIFIED
#define _ExecutorType_MAX EXECUTOR_TYPE_DC_MOTOR
#define _ExecutorType_ARRAYSIZE ((ExecutorType)(EXECUTOR_TYPE_DC_MOTOR+1))
#define ExecutorType_EXECUTOR_TYPE_UNSPECIFIED EXECUTOR_TYPE_UNSPECIFIED
#define ExecutorType_EXECUTOR_TYPE_LED EXECUTOR_TYPE_LED
#define ExecutorType_EXECUTOR_TYPE_LED_PWM EXECUTOR_TYPE_LED_PWM
#define ExecutorType_EXECUTOR_TYPE_BUZZER EXECUTOR_TYPE_BUZZER
#define ExecutorType_EXECUTOR_TYPE_SERVO EXECUTOR_TYPE_SERVO
#define ExecutorType_EXECUTOR_TYPE_SERVO_SMALL EXECUTOR_TYPE_SERVO_SMALL
#define ExecutorType_EXECUTOR_TYPE_DC_MOTOR EXECUTOR_TYPE_DC_MOTOR

#define _ExecutorPort_MIN EXECUTOR_PORT_UNSPECIFIED
#define _ExecutorPort_MAX EXECUTOR_PORT_M4
#define _ExecutorPort_ARRAYSIZE ((ExecutorPort)(EXECUTOR_PORT_M4+1))
#define ExecutorPort_EXECUTOR_PORT_UNSPECIFIED EXECUTOR_PORT_UNSPECIFIED
#define ExecutorPort_EXECUTOR_PORT_OUT1 EXECUTOR_PORT_OUT1
#define ExecutorPort_EXECUTOR_PORT_OUT2 EXECUTOR_PORT_OUT2
#define ExecutorPort_EXECUTOR_PORT_OUT3 EXECUTOR_PORT_OUT3
#define ExecutorPort_EXECUTOR_PORT_OUT4 EXECUTOR_PORT_OUT4
#define ExecutorPort_EXECUTOR_PORT_OUT5 EXECUTOR_PORT_OUT5
#define ExecutorPort_EXECUTOR_PORT_OUT6 EXECUTOR_PORT_OUT6
#define ExecutorPort_EXECUTOR_PORT_OUT7 EXECUTOR_PORT_OUT7
#define ExecutorPort_EXECUTOR_PORT_OUT8 EXECUTOR_PORT_OUT8
#define ExecutorPort_EXECUTOR_PORT_M1 EXECUTOR_PORT_M1
#define ExecutorPort_EXECUTOR_PORT_M2 EXECUTOR_PORT_M2
#define ExecutorPort_EXECUTOR_PORT_M3 EXECUTOR_PORT_M3
#define ExecutorPort_EXECUTOR_PORT_M4 EXECUTOR_PORT_M4

#define _ExecutorCommandType_MIN EXECUTOR_COMMAND_TYPE_UNSPECIFIED
#define _ExecutorCommandType_MAX EXECUTOR_COMMAND_TYPE_SET_VALUE
#define _ExecutorCommandType_ARRAYSIZE ((ExecutorCommandType)(EXECUTOR_COMMAND_TYPE_SET_VALUE+1))
#define ExecutorCommandType_EXECUTOR_COMMAND_TYPE_UNSPECIFIED EXECUTOR_COMMAND_TYPE_UNSPECIFIED
#define ExecutorCommandType_EXECUTOR_COMMAND_TYPE_ON EXECUTOR_COMMAND_TYPE_ON
#define ExecutorCommandType_EXECUTOR_COMMAND_TYPE_OFF EXECUTOR_COMMAND_TYPE_OFF
#define ExecutorCommandType_EXECUTOR_COMMAND_TYPE_SET_VALUE EXECUTOR_COMMAND_TYPE_SET_VALUE

#define Executor_type_ENUMTYPE ExecutorType
#define Executor_port_ENUMTYPE ExecutorPort


#define ExecutorCommand_type_ENUMTYPE ExecutorCommandType



/* Initializer values for message structs */
#define Executor_init_default                    {0, _ExecutorType_MIN, "", _ExecutorPort_MIN}
#define ExecutorTask_init_default                {0, false, ExecutorCommand_init_default}
#define ExecutorCommand_init_default             {_ExecutorCommandType_MIN, 0, {0}}
#define ExecutorData_init_default                {0, 0}
#define Executor_init_zero                       {0, _ExecutorType_MIN, "", _ExecutorPort_MIN}
#define ExecutorTask_init_zero                   {0, false, ExecutorCommand_init_zero}
#define ExecutorCommand_init_zero                {_ExecutorCommandType_MIN, 0, {0}}
#define ExecutorData_init_zero                   {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Executor_id_tag                          1
#define Executor_type_tag                        2
#define Executor_name_tag                        3
#define Executor_port_tag                        4
#define ExecutorCommand_type_tag                 1
#define ExecutorCommand_args_tag                 2
#define ExecutorTask_id_tag                      1
#define ExecutorTask_command_tag                 2
#define ExecutorData_id_tag                      1
#define ExecutorData_ExecutorValue_tag           2

/* Struct field encoding specification for nanopb */
#define Executor_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, UENUM,    type,              2) \
X(a, STATIC,   SINGULAR, STRING,   name,              3) \
X(a, STATIC,   SINGULAR, UENUM,    port,              4)
#define Executor_CALLBACK NULL
#define Executor_DEFAULT NULL

#define ExecutorTask_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  command,           2)
#define ExecutorTask_CALLBACK NULL
#define ExecutorTask_DEFAULT NULL
#define ExecutorTask_command_MSGTYPE ExecutorCommand

#define ExecutorCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   REPEATED, UINT32,   args,              2)
#define ExecutorCommand_CALLBACK NULL
#define ExecutorCommand_DEFAULT NULL

#define ExecutorData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, UINT32,   ExecutorValue,     2)
#define ExecutorData_CALLBACK NULL
#define ExecutorData_DEFAULT NULL

extern const pb_msgdesc_t Executor_msg;
extern const pb_msgdesc_t ExecutorTask_msg;
extern const pb_msgdesc_t ExecutorCommand_msg;
extern const pb_msgdesc_t ExecutorData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Executor_fields &Executor_msg
#define ExecutorTask_fields &ExecutorTask_msg
#define ExecutorCommand_fields &ExecutorCommand_msg
#define ExecutorData_fields &ExecutorData_msg

/* Maximum encoded size of messages (where known) */
#define ExecutorCommand_size                     9
#define ExecutorData_size                        12
#define ExecutorTask_size                        14
#define Executor_size                            25

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
